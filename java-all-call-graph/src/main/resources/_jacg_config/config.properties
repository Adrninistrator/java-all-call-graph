# 当前应用的调用关系写入数据库里的表名后缀，分隔符不能使用-，需要使用_
app.name=test

# 并发处理线程数量/数据源连接池数量（若超过了需要处理的任务数量，会使用任务数量作为线程数量）
thread.num=20

# 批量写入数据库时每次插入的数量
db.insert.batch.size=1000

# 在插入数据库表前，对表执行 DROP(false) 还是 TRUNCATE(true) 操作
drop.or.truncate.table=false

# 解析jar包时，是否对.xml、.properties等其他格式的文件进行解析，false:不解析，true:解析
parse.other.type.file=true

# 解析jar包时，是否处理通过get/set方法关联的字段关联关系，false:不处理，true:处理
handle.get.set.field.relationship=false

# 生成调用链文件的根目录路径，以"/"或"\\"作为分隔符，末尾是否为分隔符不影响（默认为当前目录）
output.root.path=

# 生成调用链文件的目录名中的标志，完整目录名使用{app.name}{output.dir.flag}_{当前时间}，默认为空
output.dir.flag=

# 生成调用链文件的目录名，非空时目录名使用当前值，为空时使用上一个参数说明的格式
output.dir.name=

# 生成调用链文件时，是否检查jar包文件有更新，若发现jar包文件内容发生变化则不生成，false:不检查，true:检查
check.jar.file.updated=false

# 生成调用链时的详细程度
# 0: 最详细 完整类名+方法名+方法参数+返回类型
# 1: 详细 完整类名+方法名+方法参数
# 2: 中等 完整类名+方法名
# 3: 最简单 简单类名（对于同名类展示完整类名）+方法名
call.graph.output.detail=1

# 生成向下的调用链时，在一个调用方法中出现多次的被调用方法（包含方法调用业务功能数据），是否需要忽略，true:忽略，false:不忽略
ignore.dup.callee.in.one.caller=false

# 生成方法调用链时，是否需要为每个调用堆栈生成独立的文件，仅当 call.graph.output.detail=1 时支持
call.graph.gen.separate.stack=false

# 生成向下的方法调用链时，是否需要输出JSON格式的内容
call.graph.gen.json.caller=false

# 生成调用链文件时，每个方法允许生成的方法调用数量限制，默认为0，小于等于0代表不限制
gen.call.graph.num.limit=0

