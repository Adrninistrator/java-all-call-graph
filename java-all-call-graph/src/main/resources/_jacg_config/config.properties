# 当前应用的调用关系写入数据库里的表名后缀
# 不能使用-作为分隔符，可使用_
app.name=test

# 并发处理线程数量/数据源连接池数量
# 若超过了需要处理的任务数量，会使用任务数量作为线程数量
thread.num=20

# 批量写入数据库时每次插入的数量
db.insert.batch.size=1000

# 在插入数据库表前，对表执行的清理操作 true: DROP，false: TRUNCATE
drop.or.truncate.table=false

# 生成方法调用链文件的根目录路径，以"/"或"\\"作为分隔符，末尾是否为分隔符不影响
# 默认为当前目录
output.root.path=

# 生成方法调用链文件的目录名中的标志
# 完整目录名使用{app.name}{output.dir.flag}_{当前时间}
# 默认为空
output.dir.flag=

# 生成方法调用链文件的目录名
# 非空时目录名使用当前参数值
# 默认为空，使用 output.dir.flag 参数说明的格式
output.dir.name=

# 生成方法调用链文件时，若发现jar文件内容发生变化是否退出生成，true: 退出生成，false: 继续生成
check.jar.file.updated=false

# 需要解析的jar文件没有变化时是否跳过写数据库操作，true：跳过，false：不跳过
skip.write.db.when.jar.not.modified=false

# 生成方法调用链文件时的详细程度
# 0: 最详细 完整类名+方法名+方法参数+返回类型 1: 详细 完整类名+方法名+方法参数 2: 中等 完整类名+方法名 3: 最简单 简单类名（对于同名类展示完整类名）+方法名
call.graph.output.detail=1

# 生成向下的方法调用链文件时，在一个调用方法中出现多次的被调用方法（包含方法调用业务功能数据），是否忽略
# true: 忽略，false: 不忽略
ignore.dup.callee.in.one.caller=false

# 生成方法调用链文件时，是否生成其他形式的调用堆栈文件，仅当 call.graph.output.detail=0 时支持
call.graph.gen.stack.other.forms=false

# 生成向下的方法调用链文件时，是否输出JSON格式的方法调用链文件
call.graph.gen.json.caller=false

# 生成方法调用链文件时，每个方法允许生成的方法调用数量限制，默认为0，小于等于0代表不限制
gen.call.graph.num.limit=0

# 生成方法调用链文件时，允许生成的方法调用链深度限制，默认为0，小于等于0代表不限制
gen.call.graph.depth.limit=0

# 生成方法调用链文件时，是否将调用链数据写入文件
call.graph.write.to.file=true

# 生成方法调用链文件时，是否在内存中返回调用链数据
# 不能与 call.graph.write.to.file 开关同时设置为false
call.graph.return.in.memory=false

# 生成方法调用链文件时，文件名是否使用更短的模式，以避免超过Windows文件系统支持的长度
# 若是，则文件名仅包含对应方法的HASH+长度；若否，则文件名还会包含方法的唯一类名及方法名
call.graph.file.short.mode=false

