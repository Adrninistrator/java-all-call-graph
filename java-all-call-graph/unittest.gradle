apply plugin: 'jacoco'

test {
    doFirst {
        exclude('test/other', 'test/runbycode/targz', 'test/runlocal', 'test/runbycode/TestRBC*')
        minHeapSize = "256m"
        maxHeapSize = "1g"

        maxParallelForks = 1

        forkEvery = 5

        def TEST_FLAG_RECORD_LOG_TO_FILE = "test.flag.record.log.to.file"
        def testFlagRecordLogToFile = System.getProperty(TEST_FLAG_RECORD_LOG_TO_FILE)
        jvmArgs "-XX:MetaspaceSize=64m", "-XX:MaxMetaspaceSize=256m", "-D" + TEST_FLAG_RECORD_LOG_TO_FILE + "=" + testFlagRecordLogToFile

        testLogging {
            events "PASSED", "STARTED", "FAILED", "SKIPPED"
        }
    }
}

jacocoTestReport {
    reports {
        xml.required.set(false)
        csv.required.set(false)
        html.required.set(true)
        html.outputLocation.set(file("${buildDir}/jacocoReport"))
    }
}

/*
    使用Gradle执行单元测试时，假如需要将日志中的输出记录到文件，使用以下命令：
    gradlew test -Dtest.flag.record.log.to.file=1
 */

/*
    执行单元测试及代码覆盖率统计
    gradlew test jacocoTestReport
 */


// 将测试代码生成jar包
task test_gen_jar(type: Jar) {
    archiveFileName.set('test.jar')
    from(sourceSets.test.output) {
        include 'test/callgraph/**'
        exclude 'test/callgraph/otherjar/**'
        into '/'
    }
    from('src/test/resources/') {
        include 'applicationContext.xml'
        into 'resources/'
    }
}

// 拷贝对应的java代码
task test_copy_example() {
    doFirst {
        def exampleFlag = project.properties.get("example_flag")
        if (exampleFlag != null) {
            println 'example_flag: ' + exampleFlag
            delete 'src/test/java/test/callgraph/diffjar'
            def exampleDir = 'src/test/resources/java_example/example_' + exampleFlag + '/diffjar'
            def javaExampleDirs = new File("${exampleDir}").listFiles().findAll { File f -> (f.isDirectory()) }
            javaExampleDirs.each { javaExampleDir ->
                def dirName = javaExampleDir.getName()
                println 'dir_name: ' + dirName
                copy {
                    from "${exampleDir}/" + dirName
                    into 'src/test/java/test/callgraph/diffjar/' + dirName
                }
            }
        }
    }
}

compileTestJava.dependsOn(test_copy_example)

// 将用于比较的测试代码生成jar包
task test_gen_diff_jar(type: Jar) {
    def exampleFlag = project.properties.get("example_flag")
    def jarName = 'jar-diff-version-' + exampleFlag + '/jar-diff-' + exampleFlag + '.jar'
    archiveFileName.set("${jarName}")
    doFirst {
        println 'example_flag: ' + exampleFlag + ' jarName: ' + jarName
        delete 'build/libs' + jarName
    }
    from(sourceSets.test.output) {
        include 'test/callgraph/diffjar/**'
        into '/'
    }
}

// 将jar-diff-version-目录的文件生成tar.gz包
task test_gen_diff_tar_gz(type: Tar) {
    dependsOn test_gen_diff_jar
    compression = Compression.GZIP
    def exampleFlag = project.properties.get("example_flag")
    // 若使用archiveBaseName，则生成的文件包中会包含“-当前版本号”
    archiveFileName.set("jar-diff-version-" + exampleFlag + ".tar.gz")
    destinationDirectory.set(file("${buildDir}/test_diff_tar_gz"))
    from('build/libs/jar-diff-version-' + exampleFlag)
}

/*
    测试代码生成jar包
    gradlew test_gen_jar

    生成用于比较的示例jar包
    gradlew test_gen_diff_jar -Pexample_flag=1
    gradlew test_gen_diff_jar -Pexample_flag=2

    生成用于比较的示例jar包的tar.gz包
    gradlew test_gen_diff_tar_gz -Pexample_flag=1
    gradlew test_gen_diff_tar_gz -Pexample_flag=2
 */
